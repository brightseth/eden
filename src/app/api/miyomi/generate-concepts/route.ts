/**
 * MIYOMI Dynamic Concept Generation API
 * Generates fresh video concepts based on real-time market data
 */
import { NextRequest, NextResponse } from 'next/server';
import { miyomiDynamicConcepts, DynamicVideoConcept } from '@/lib/agents/miyomi-dynamic-concepts';

export const runtime = 'nodejs';

interface ConceptRequest {
  count?: number;
  urgencyThreshold?: number;
  targetAudience?: 'retail_traders' | 'crypto_natives' | 'macro_tourists' | 'contrarians' | 'gen_z_investors';
  trendingOnly?: boolean;
  autoGenerate?: boolean; // Generate video immediately for top concept
}

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const count = parseInt(searchParams.get('count') || '5');
    const urgencyThreshold = parseInt(searchParams.get('urgencyThreshold') || '0');
    const targetAudience = searchParams.get('targetAudience') as ConceptRequest['targetAudience'];
    const trendingOnly = searchParams.get('trendingOnly') === 'true';

    console.log('[MIYOMI Concepts] Generating concepts:', { count, urgencyThreshold, targetAudience, trendingOnly });

    // Generate dynamic concepts
    let concepts = await miyomiDynamicConcepts.generateDynamicConcepts(count);

    // Apply filters
    if (urgencyThreshold > 0) {
      concepts = concepts.filter(c => c.urgencyScore >= urgencyThreshold);
    }

    if (targetAudience) {
      concepts = concepts.filter(c => c.targetAudience === targetAudience);
    }

    if (trendingOnly) {
      concepts = concepts.filter(c => c.trendingPotential === 'viral' || c.trendingPotential === 'high');
    }

    // Enhance concepts with additional metadata
    const enhancedConcepts = concepts.map(concept => ({
      ...concept,
      readyToGenerate: concept.urgencyScore > 70,
      estimatedProductionTime: concept.emotionalFrequency.primary === 'artistic' ? '10-15 minutes' : '5-8 minutes',
      platformOptimization: {
        tiktok: concept.targetAudience === 'gen_z_investors' ? 'high' : 'medium',
        youtube: concept.trendingPotential === 'viral' ? 'high' : 'medium',
        twitter: concept.urgencyScore > 80 ? 'high' : 'medium'
      }
    }));

    return NextResponse.json({
      success: true,
      concepts: enhancedConcepts,
      metadata: {
        totalGenerated: concepts.length,
        highUrgency: concepts.filter(c => c.urgencyScore > 80).length,
        viralPotential: concepts.filter(c => c.trendingPotential === 'viral').length,
        generatedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('[MIYOMI Concepts] Error generating concepts:', error);
    return NextResponse.json(
      { 
        error: 'Failed to generate concepts',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: ConceptRequest & { conceptId?: string } = await request.json();
    const { count = 3, autoGenerate = false, conceptId } = body;

    console.log('[MIYOMI Concepts] POST request:', { count, autoGenerate, conceptId });

    if (conceptId && autoGenerate) {
      // Auto-generate video from specific concept
      const result = await generateVideoFromConcept(conceptId);
      return NextResponse.json(result);
    }

    // Generate fresh concepts
    const concepts = await miyomiDynamicConcepts.generateDynamicConcepts(count);
    
    let videoGeneration = null;
    
    if (autoGenerate && concepts.length > 0) {
      // Automatically generate video from top concept
      const topConcept = concepts[0];
      console.log(`ðŸŽ¬ Auto-generating video for concept: ${topConcept.title}`);
      
      try {
        const videoResponse = await fetch('/api/miyomi/generate-video', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            prompt: createPromptFromConcept(topConcept),
            style: 'artistic',
            format: 'short',
            useArtisticFramework: true
          })
        });
        
        if (videoResponse.ok) {
          videoGeneration = await videoResponse.json();
        }
      } catch (videoError) {
        console.error('Auto video generation failed:', videoError);
      }
    }

    return NextResponse.json({
      success: true,
      concepts,
      videoGeneration,
      autoGenerated: autoGenerate && !!videoGeneration
    });

  } catch (error) {
    console.error('[MIYOMI Concepts] POST error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Helper functions

async function generateVideoFromConcept(conceptId: string): Promise<any> {
  // This would fetch the concept from storage and generate video
  // For now, return placeholder
  return {
    success: true,
    message: `Video generation started for concept ${conceptId}`,
    videoId: `video_${conceptId}_${Date.now()}`
  };
}

function createPromptFromConcept(concept: DynamicVideoConcept): string {
  return `Create a dynamic market analysis video:

Title: ${concept.title}
Hook: ${concept.hook}
Core Concept: ${concept.coreConcept}

Visual Style: ${concept.visualDNA}
Emotional Frequency: ${concept.emotionalFrequency.primary} with ${concept.emotionalFrequency.secondary} undertones

Script Outline:
Hook: ${concept.scriptOutline.hook}
Development: ${concept.scriptOutline.development}
Revelation: ${concept.scriptOutline.revelation}
Resolution: ${concept.scriptOutline.resonance}

Data Points:
- Primary: ${concept.dataPoints.primary}
- Supporting: ${concept.dataPoints.supporting.join(', ')}

Contrarian Angle: ${concept.contrarian_angle}

Target Audience: ${concept.targetAudience}
Urgency Score: ${concept.urgencyScore}/100

Create a compelling video that combines financial analysis with artistic storytelling, emphasizing the contrarian perspective and real-time market insights.`;
}